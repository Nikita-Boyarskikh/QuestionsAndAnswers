events {
  worker_connections 1024;
}

http {
  resolver 127.0.0.11 ipv6=off;

  upstream backend {
    server web:3000;
  }

  # Logging
  log_format main '$remote_addr - $remote_user [$time_local] $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log WEB_ROOT/log/nginx.access.log main;
  error_log  WEB_ROOT/log/nginx.error.log;

  # Proxy params
  proxy_cache_path      /var/lib/nginx/cache levels=1:2 keys_zone=cache:30m max_size=1G;
  proxy_temp_path       /var/lib/nginx/proxy;
  proxy_ignore_headers  Expires Cache-Control;
  proxy_cache_use_stale error timeout invalid_header http_502;
  proxy_no_cache        $cookie_session;

  # HTTPS server
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name NGINX_HOST www.NGINX_HOST;

    root WEB_ROOT/public;

    charset         utf-8;

    # Gzipping
    gzip            on;
    gzip_static     on;
    gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
    gzip_disable    "msie6";
    gzip_comp_level 5;

    location ~ /q\. {
      deny all;
    }
    location ~* ^.+\.(rb|log)$ {
      deny all;
    }

    # Cache static files
    location ~* ^.+\.(css|txt|map|ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|js|jsx|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
      try_files $uri @rails;

      access_log off;
      gzip_static on;

      expires max;
      add_header Cache-Control public;

      add_header Last-Modified "";
      add_header ETag "";
      break;
    }

    # Send non-static file requests to the web server
    location / {
      try_files $uri @rails;
    }

    location @rails {
      proxy_set_header X-Real-IP  $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect   off;
      proxy_pass http://backend;
    }
  }

  # HTTP server
  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name NGINX_HOST www.NGINX_HOST;
    return 301 https://$server_name$request_uri;
  }
}